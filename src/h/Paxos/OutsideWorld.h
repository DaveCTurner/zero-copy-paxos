/*

    Copyright 2017 David Turner

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*/



#ifndef PAXOS_OUTSIDE_WORLD_H
#define PAXOS_OUTSIDE_WORLD_H

#include <chrono>

namespace Paxos {

using instant = std::chrono::steady_clock::time_point;

/* The OutsideWorld is an abstract base class for the interactions (sending
messages, setting timers) with the rest of the world. */

class OutsideWorld {
  public:
    virtual const instant get_current_time() = 0;
    virtual void set_next_wake_up_time(const instant &) = 0;

    virtual void seek_votes_or_catch_up(const Slot&, const Term&) = 0;
    virtual void offer_catch_up(const NodeId&) = 0;
    virtual void offer_vote(const NodeId&, const Term&) = 0;
    virtual void request_catch_up(const NodeId&) = 0;
    virtual void prepare_term(const Term&) = 0;

    virtual void record_promise(const Term&, const Slot&) = 0;
    virtual void make_promise(const Promise&) = 0;
    virtual void proposed_and_accepted(const Proposal&) = 0;
    virtual void accepted(const Proposal&) = 0;

    /* Stream content was successfully committed. The stream
       is identified in the Proposal argument, and the other
       argument is the stream position of the first byte committed. */
    virtual void chosen_stream_content(const Proposal&) = 0;

    /* Stream content was committed, but there is a gap in the stream.
       This means the stream is broken and should be closed. */
    virtual void chosen_non_contiguous_stream_content
                            (const Proposal&, uint64_t, uint64_t) = 0;

    /* Stream content was committed, but for a stream other than the
       current one. If stream content is committed at the start
       of a stream then this simply opens a new stream - see
       chosen_stream_content(); this is called if the new stream content
       was not at the start of the stream. */
    virtual void chosen_unknown_stream_content
                    (const Proposal&, Value::StreamName, uint64_t) = 0;

    /* Some new node IDs were generated by this node, which normally
       happens when a new node is registering. The new ID should be
       sent onto the waiting node. */
    virtual void chosen_generate_node_ids(const Proposal&, NodeId) = 0;

    /* A new configuration was chosen. This should be durably written
       so that the recorded acceptances can be checked for quorums
       after a crash. */
    virtual void chosen_new_configuration
              (const Proposal&, const Era&, const Configuration&) = 0;

};

}

#endif // ndef PAXOS_OUTSIDE_WORLD_H
